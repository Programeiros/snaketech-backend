// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id
  name       String
  email      String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Article    Article[]
  Comment    Comment[]
  Likes      Like[]
  Challenge  Challenge[]
  User_Role  User_Role[]

  @@map("user")
}

model Article {
  id         Int       @id @default(autoincrement())
  title      String
  slug       String    @unique
  content    String
  author_id  String
  author     User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Comment    Comment[]
  Likes      Like[]

  @@map("article")
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  author_id  String
  author     User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  article_id Int
  article    Article   @relation(fields: [article_id], references: [id], onDelete: Cascade)
  parent_id  Int?
  reply      Comment[] @relation("reply")
  parent     Comment?  @relation("reply", fields: [parent_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("comment")
}

model Like {
  fk_user_id    String
  fk_article_id Int
  user          User    @relation(fields: [fk_user_id], references: [id])
  article       Article @relation(fields: [fk_article_id], references: [id])

  @@id([fk_user_id, fk_article_id])
  @@map("like")
}

model Challenge {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  difficulty  String
  author_id   String
  author      User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("challenge")
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  created_at  DateTime          @default(now())
  Permissions Permission_Role[]
  User_Role   User_Role[]

  @@map("role")
}

model Permission {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  created_at  DateTime          @default(now())
  Roles       Permission_Role[]

  @@map("permission")
}

model Permission_Role {
  role_id       Int
  permission_id Int
  Role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  Permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("permission_role")
}

model User_Role {
  user_id String
  role_id Int
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("user_role")
}
